
import random
import math

def distance(city1, city2):
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

def total_distance(route, cities):
    return sum(distance(cities[route[i]], cities[route[i+1]]) for i in range(len(route)-1))

def simulated_annealing(cities, T=10000.0, alpha=0.99, stopping_T=0.0001):
    current_route = random.sample(range(len(cities)), len(cities))
    current_cost = total_distance(current_route, cities)
    while T > stopping_T:
        new_route = current_route[:]
        l, r = sorted(random.sample(range(len(cities)), 2))
        new_route[l:r+1] = reversed(new_route[l:r+1])
        new_cost = total_distance(new_route, cities)
        delta = new_cost - current_cost
        if delta < 0 or random.random() < math.exp(-delta / T):
            current_route, current_cost = new_route, new_cost
        T *= alpha
    return current_route, current_cost

cities = [(random.random(), random.random()) for _ in range(20)]
print(simulated_annealing(cities))
